CREATE DATABASE PROJECT1;
USE PROJECT1;

RENAME TABLE COFFEE_SHOP_SALES_DATA TO COFFEE;

SELECT COUNT(*) FROM COFFEE;

SELECT * FROM COFFEE;


DESCRIBE COFFEE;

UPDATE COFFEE SET TRANSACTION_DATE =STR_TO_DATE(TRANSACTION_DATE, "%d-%m-%Y");
ALTER TABLE COFFEE MODIFY COLUMN TRANSACTION_DATE DATE;

UPDATE COFFEE SET TRANSACTION_TIME = STR_TO_DATE(TRANSACTION_TIME, "%H:%i:%s");
ALTER TABLE COFFEE MODIFY COLUMN TRANSACTION_TIME TIME;

ALTER TABLE COFFEE RENAME COLUMN ï»¿transaction_id TO TRANSACTION_ID;

SELECT TRANSACTION_ID FROM COFFEE GROUP BY TRANSACTION_ID HAVING COUNT(*)>1;

SELECT * FROM COFFEE WHERE TRANSACTION_ID IS NULL;

UPDATE COFFEE SET UNIT_PRICE = UNIT_PRICE*75;

ALTER TABLE COFFEE ADD COLUMN SALES BIGINT;
UPDATE COFFEE SET SALES = TRANSACTION_QTY*UNIT_PRICE;

ALTER TABLE COFFEE ADD COLUMN DAYOFWEEK CHAR(30);
UPDATE COFFEE SET DAYOFWEEK = DAYOFWEEK(TRANSACTION_DATE);
UPDATE COFFEE
SET DAYOFWEEK  = CASE DAYOFWEEK
    WHEN 1 THEN 'Sunday'
    WHEN 2 THEN 'Monday'
    WHEN 3 THEN 'Tuesday'
    WHEN 4 THEN 'Wednesday'
    WHEN 5 THEN 'Thursday'
    WHEN 6 THEN 'Friday'
    WHEN 7 THEN 'Saturday'
    ELSE NULL  -- Optional: handle invalid values
END;

ALTER TABLE COFFEE RENAME COLUMN DAYOFWEEK TO DAY_NAME; 




-- PROBLEM STATEMENTS




-- 1A) CALCULATE THE TOTAL SALES FOR EACH RESPECTIVE MONTH?

SELECT 
	MONTH(TRANSACTION_DATE) AS MONTH,
    CONCAT(ROUND(SUM(SALES)/1000, 1), "k") AS TOTAL_SALES
FROM COFFEE
GROUP BY MONTH(TRANSACTION_DATE);


-- 1B)DETERMINE THE MONTH ON MONTH INCREASE OR DECREASE IN SALES?

SELECT 
	MONTH(TRANSACTION_DATE) AS SALES_MONTH,
	SUM(SALES) AS CUR_MONTH_SALES, LAG(SUM(SALES)) OVER (ORDER BY MONTH(TRANSACTION_DATE)) AS PREV_MONTH_SALES,
	SUM(SALES) - LAG(SUM(SALES)) OVER(ORDER BY MONTH(TRANSACTION_DATE)) AS MONTH_ON_MONTH,
	(SUM(SALES) - LAG(SUM(SALES)) OVER(ORDER BY MONTH(TRANSACTION_DATE)))/
	LAG(SUM(SALES)) OVER(ORDER BY MONTH(TRANSACTION_DATE))* 100
	AS PERC_DIFF
FROM COFFEE
GROUP BY MONTH(TRANSACTION_DATE)
ORDER BY MONTH(TRANSACTION_DATE);
   
   
-- 1C)CALCULATE THE SALES DIFFERENCE IN SALES BETWEEN THE SELECTED MONTH AND PREVIOUS MONTH?
-- SELECTED MONTH = 3, PREVIOUS MONTH = 2

SELECT 
	(SELECT SUM(SALES) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 3) CURR_SALES,
    (SELECT SUM(SALES) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 2) PREV_SALES,
    (SELECT SUM(SALES) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 3) - (SELECT SUM(SALES) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 2) AS SALES_DIFF;

    
-- 2A) CALCULATE THE TOTAL NUMBER OF ORDERS FOR EACH RESPECTIVE MONTH?

SELECT 
	MONTH(TRANSACTION_DATE), 
    COUNT(TRANSACTION_ID) AS ORDERS 
FROM COFFEE 
GROUP BY MONTH(TRANSACTION_DATE);
 
 
-- 2B) DETERMINE THE MONTH ON MONTH INCREASE OR DECREASE IN THE NUMBER OF ORDERS? 

SELECT 
	MONTH(TRANSACTION_DATE) SALES_MONTH,
    COUNT(TRANSACTION_ID) CURR_MON_ORD,
    LAG(COUNT(TRANSACTION_ID)) OVER(ORDER BY MONTH(TRANSACTION_DATE)) PREV_MON_ORD,
    (COUNT(TRANSACTION_ID) - LAG(COUNT(TRANSACTION_ID)) OVER (ORDER BY MONTH(TRANSACTION_DATE))) AS ORDER_DIFF,
    (COUNT(TRANSACTION_ID) - LAG(COUNT(TRANSACTION_ID)) OVER(ORDER BY MONTH(TRANSACTION_DATE)))/
    LAG(COUNT(TRANSACTION_ID)) OVER(ORDER BY MONTH(TRANSACTION_DATE))*100 AS PER_DIFF
FROM COFFEE
GROUP BY MONTH(TRANSACTION_DATE)
ORDER BY MONTH(TRANSACTION_DATE);
    
    
-- 2C) CALCULATE THE DIFFERNCE IN THE NUMBER OF ORDERS BETWEEN THE SELECTED AND THE PREVIOUS MONTH?

SELECT 
	(SELECT COUNT(TRANSACTION_ID) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 3) AS CURR_MON_ORD,
    (SELECT COUNT(TRANSACTION_ID) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 2) AS PREV_MON_ORD, 
    ((SELECT COUNT(TRANSACTION_ID) FROM COFFEE WHERE MONTH(TRANSACTION_DATE)= 3) - (SELECT COUNT(TRANSACTION_ID) FROM COFFEE WHERE MONTH(TRANSACTION_DATE) = 2)) AS ORD_DIFF;
    

-- 3A) CALCULATE THE TOTAL QUANTITY SOLD FOR EACH RESPECTIVE MONTH?

SELECT
	MONTH(TRANSACTION_DATE) MONTH, 
    SUM(TRANSACTION_QTY) TOTAL_QTY
FROM COFFEE
GROUP BY MONTH(TRANSACTION_DATE);


-- 3B) DETERMINE THE MONTH ON MONTH INCREASE OR DECREASE IN THE TOTAL QUANTITY SOLD?

SELECT 
	MONTH(TRANSACTION_DATE) MONTH,
	SUM(TRANSACTION_QTY) CURR_MON_QTY,
	LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE))PREV_MON_QTY,
	SUM(TRANSACTION_QTY) - LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE)) DIFF_QTY,
	(SUM(TRANSACTION_QTY) - LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE)))/
    LAG(SUM(TRANSACTION_QTY)) OVER (ORDER BY MONTH(TRANSACTION_DATE)) * 100 PER_DIFF
FROM COFFEE
GROUP BY MONTH(TRANSACTION_DATE);


-- 3C) CALCULATE THE DIFFERNECE IN THE TOTAL QUANTITY SOLD BETWEEN THE SELECTED MONTH AND PREVIOUS MONTH?

SELECT 
	MONTH(TRANSACTION_DATE) MONTH,
	SUM(TRANSACTION_QTY) CURR_MON_QTY,
	LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE))PREV_MON_QTY,
	SUM(TRANSACTION_QTY) - LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE)) DIFF_QTY,
	(SUM(TRANSACTION_QTY) - LAG(SUM(TRANSACTION_QTY)) OVER(ORDER BY MONTH(TRANSACTION_DATE)))/
	LAG(SUM(TRANSACTION_QTY)) OVER (ORDER BY MONTH(TRANSACTION_DATE)) * 100 PER_DIFF
FROM COFFEE
WHERE MONTH(TRANSACTION_DATE) IN (3, 2)
GROUP BY MONTH(TRANSACTION_DATE);




-- CHARTS REQUIREMENT(Duplicating the power bi analysis by SQL)




-- 1) CALCULATE THE TOTAL SALES, ORDERS AND QUANTITY OF A SELECTED DAY?

SELECT 
	COUNT(TRANSACTION_ID) ORDERS,
	SUM(TRANSACTION_QTY) TOTAL_QTY,
	SUM(SALES) TOTAL_SALES 
FROM COFFEE 
WHERE TRANSACTION_DATE = "2023-01-25" ;


-- 2) CALCULATE THE TOTAL SALES, ORDERS AND QUANTITY OF A SELECTED DAY AND HOUR?

SELECT
	COUNT(TRANSACTION_ID) TOTAL_ORDERS,
	SUM(TRANSACTION_QTY) TOTAL_QTY,
	SUM(SALES) TOTAL_SALES
FROM COFFEE
WHERE TRANSACTION_DATE = "2023-01-25" AND TRANSACTION_TIME >= "19:00:00" AND TRANSACTION_TIME < "20:00:00";
			

-- 3) SEGMENT SALES DATA INTO WEEKENDS AND WEEKDAYS TO ANALYZE PERFORMANCE VARIATIONS?

SELECT 
	CASE 
		WHEN DAYOFWEEK(TRANSACTION_DATE) IN (1, 7) THEN "WEEKENDS"
		ELSE "WEEKDAYS"
    END AS DAY_TYPE,
    SUM(SALES) TOTAL_SALES
FROM COFFEE
GROUP BY DAY_TYPE;

  
-- 4) CALCULATE THE TOTAL SALES, ORDERS AND QUANITY BY STORE LOCATION?

SELECT
	COUNT(TRANSACTION_ID) TOTAL_ORDERS,
	SUM(TRANSACTION_QTY) TOTAL_QTY,
	SUM(SALES) TOTAL_SALES,
	STORE_LOCATION
FROM COFFEE
GROUP BY STORE_LOCATION; 
 
 
 -- 5) CALCULATE THE TOTAL SALES, ORDERS AND QTY BY PRODUCT CATEGORY?
 
SELECT
	COUNT(TRANSACTION_ID) TOTAL_ORDERS,
	SUM(TRANSACTION_QTY) TOTAL_QTY,
	SUM(SALES) TOTAL_SALES,
	PRODUCT_CATEGORY
FROM COFFEE
GROUP BY PRODUCT_CATEGORY;
            
 -- 6) CALCULATE THE TOTAL SALES, ORDERS AND QTY BY PRODUCT TYPE?
 
SELECT
	COUNT(TRANSACTION_ID) TOTAL_ORDERS,
	SUM(TRANSACTION_QTY) TOTAL_QTY,
	SUM(SALES) TOTAL_SALES,
	PRODUCT_TYPE
FROM COFFEE
GROUP BY PRODUCT_TYPE;
                        
-- 7) CALCULATING THE AVERAGE SALES OF A SELECTED MONTH?

SELECT
	AVG(ORDER_COUNT) AVG_ORDER,
    AVG(QTY_COUNT) AVG_QTY,
    AVG(SALES_COUNT) AVG_SALES,
    1 AS MONTH
FROM (
	SELECT 
		COUNT(TRANSACTION_ID) ORDER_COUNT,
		SUM(TRANSACTION_QTY) QTY_COUNT,
		SUM(SALES) SALES_COUNT
	FROM COFFEE
	WHERE 
    MONTH(TRANSACTION_DATE) = 1) AS SUBQUERY;
    
    
-- 8) CALCULATE THE TOTAL SALES OF A THE DAYS IN A MONTH?

SELECT
	DAY(TRANSACTION_DATE) DAY_OF_MONTH,
	SUM(SALES) TOTAL_SALES
FROM COFFEE
WHERE MONTH(TRANSACTION_DATE) = 1
GROUP BY DAY_OF_MONTH;


-- 9) 

select 
	case
		when dayofweek(transaction_date) = 2 then "moday"
        when dayofweek(transaction_date) = 3 then "tuesday"
        when dayofweek(transaction_date) = 4 then "wednesday"
		when dayofweek(transaction_date) = 5 then "thursday"
        when dayofweek(transaction_date) = 6 then "friday"
        when dayofweek(transaction_date) = 7 then "saturday"
        else "sunday"
        end as day_of_week,
        round(sum(transaction_qty * unit_price)) as total_sales
from coffee
where 
	month (transaction_date) = 5 -- may month
group by 
	case
		when dayofweek(transaction_date) = 2 then "moday"
        when dayofweek(transaction_date) = 3 then "tuesday"
        when dayofweek(transaction_date) = 4 then "wednesday"
		when dayofweek(transaction_date) = 5 then "thursday"
        when dayofweek(transaction_date) = 6 then "friday"
        when dayofweek(transaction_date) = 7 then "saturday"
        else "sunday"
        end;
        
-- 10) CALCULATE THE TOTAL SALES CORRESPONDING TO THE DAY NAME?

SELECT 
	COUNT(TRANSACTION_ID) TOTAL_ORDERS,
    SUM(TRANSACTION_QTY) TOTAL_QTY,
    SUM(SALES) TOTAL_SALES,
    DAY_NAME DAYNAME
FROM COFFEE
GROUP BY DAY_NAME;
    
    
    